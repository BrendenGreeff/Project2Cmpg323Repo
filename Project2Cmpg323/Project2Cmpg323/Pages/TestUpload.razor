@page "/test"

@using System.IO;
@using DataLibrary
@using System.Text
@using Microsoft.Extensions.Configuration
@using Project2Cmpg323.Models

@inject IDataAccess _data
@inject IConfiguration _config

<style>
    .div {
        margin: auto;
        width: auto;
        align-content:center;
        align-items:center;
        text-align:center;
        align-self:auto;
        
    }

    label {
        display: inline;
        width: 90px;
        text-align: center;
        font-weight: bold;
        align-content: center;
        align-items: center;
    }

    .heading {
        font-size: 150px;
        font-weight: bold;
    }

    .container {
        background-color: aliceblue;
        width: 20%;
        height: 55%;
        text-align: center;
    }
</style>

<h1>Upload Photo</h1>

@if (ImageUrl != null)
{
    <img src="@ImageUrl" />
    <br />
    <br />
}

<div class="div">
    <div class="dropArea @dropClass">
        Drag and drop photo, or click to select a local file.
        <InputFile disabled="@Uploading" OnChange="OnInputFileChange" @ondragenter="HandleDragEnter" @ondragleave="HandleDragLeave" multiple></InputFile>
    </div>
    <br />
    <br />
    <div>
        <img src="@Image" style="width: 250px; height: 250px" />
        <br />
        <br />
        
        <label>Enter Image Name:</label>
        <input type="text" id="imgName" @bind-value="imgmodel.Images_Name" placeholder="Enter Image Name" />\
        <br />
        <br />
        <button type="submit" class="btn-primary" @onclick="Submit">Insert</button>
    </div>
    <br />
</div>

@code{
    string ImageUrl = "";
    bool Uploading = false;
    List<string> FileUrls = new List<string>();

    ImagesModels imgmodel = new ImagesModels();
    List<ImagesModels> pictures;
    public string Image { get; set; }
    public string Images_Name { get; set; }

    //Support for drag/drop

    string dropClass = string.Empty;

    void HandleDragEnter()
    {
        dropClass = "dropAreaDrug";
    }

    void HandleDragLeave()
    {
        dropClass = string.Empty;
    }

    async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        dropClass = string.Empty;

        try
        {
            //disable the upload pane
            Uploading = true;
            await InvokeAsync(StateHasChanged);

            //Resize to no more than 400x400
            var format = "image/png";
            var resizeImageFile = await args.File.RequestImageFileAsync(format, 400, 400);

            //Read resized file into buffer
            var buffer = new byte[resizeImageFile.Size];
            await resizeImageFile.OpenReadStream().ReadAsync(buffer);

            //Get new filename with a bit of entropy
            string justFileName = Path.GetFileNameWithoutExtension(args.File.Name);
            string newFileNameWithoutPath = $"{justFileName}-{DateTime.Now.Ticks.ToString()}.png";
            string filename = $"{Environment.CurrentDirectory}\\files\\{newFileNameWithoutPath}";

            //Write the file
            File.WriteAllBytes(filename, buffer);
            ImageUrl = $"files/{newFileNameWithoutPath}";

            await ListFiles();

            var file = args.File;

            var buf = new byte[file.Size];

            await file.OpenReadStream(1512000).ReadAsync(buffer);

            Image = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";

        }
        catch
        {
        }
    }

    private async Task HandelFileSelected(InputFileChangeEventArgs fileChangeEvent)
    {
        var file = fileChangeEvent.File;

        var buffer = new byte[file.Size];

        await file.OpenReadStream(1512000).ReadAsync(buffer);

        Image = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    async Task ListFiles()
    {
        FileUrls.Clear();
        var files = Directory.GetFiles(Environment.CurrentDirectory + "\\Files", "*.*");
        foreach (var filename in files)
        {
            var file = Path.GetFileName(filename);
            string url = $"files/{file}";
            FileUrls.Add(url);
        }
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await ListFiles();
        string sql2 = "select * from images";
        pictures = await _data.LoadData<ImagesModels, dynamic>(sql2, new { }, _config.GetConnectionString("default"));
    }

    private async Task Submit()
    {

        string sql = "insert into images(Images_Name,Images_Path) values (@ImageName,@ImagePath); ";
        await _data.SaveData(sql, new { ImageName = imgmodel.Images_Name, ImagePath = Image }, _config.GetConnectionString("default"));


    }


}